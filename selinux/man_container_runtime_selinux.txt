container_runtime_selinux(8)                          SELinux Policy container_runtime                         container_runtime_selinux(8)



NAME
       container_runtime_selinux - Security Enhanced Linux Policy for the container_runtime processes

DESCRIPTION
       Security-Enhanced Linux secures the container_runtime processes via flexible mandatory access control.

       The container_runtime processes execute with the container_runtime_t SELinux type. You can check if you have these processes running
       by executing the ps command with the -Z qualifier.

       For example:

       ps -eZ | grep container_runtime_t



ENTRYPOINTS
       The container_runtime_t SELinux type can be entered via the container_runtime_exec_t file type.

       The default entrypoint paths for the container_runtime_t domain are the following:

       /usr/bin/docker

PROCESS TYPES
       SELinux defines process types (domains) for each process running on the system

       You can see the context of a process using the -Z option to ps

       Policy governs the access confined processes have to files.  SELinux container_runtime policy is very  flexible  allowing  users  to
       setup their container_runtime processes in as secure a method as possible.

       The following process types are defined for container_runtime:

       container_runtime_t

       Note:  semanage  permissive -a container_runtime_t can be used to make the process type container_runtime_t permissive. SELinux does
       not deny access to permissive process types, but the AVC (SELinux denials) messages are still generated.


BOOLEANS
       SELinux policy is customizable based on least access required.  container_runtime policy is extremely flexible and has several bool‐
       eans that allow you to manipulate the policy and run container_runtime with the tightest access possible.



       If  you  want to allow users to resolve user passwd entries directly from ldap rather then using a sssd server, you must turn on the
       authlogin_nsswitch_use_ldap boolean. Disabled by default.

       setsebool -P authlogin_nsswitch_use_ldap 1



       If you want to determine whether docker can connect to all TCP ports, you must turn on the container_connect_any  boolean.  Disabled
       by default.

       setsebool -P container_connect_any 1



       If you want to allow all daemons to write corefiles to /, you must turn on the daemons_dump_core boolean. Disabled by default.

       setsebool -P daemons_dump_core 1



       If you want to enable cluster mode for daemons, you must turn on the daemons_enable_cluster_mode boolean. Disabled by default.

       setsebool -P daemons_enable_cluster_mode 1



       If you want to allow all daemons to use tcp wrappers, you must turn on the daemons_use_tcp_wrapper boolean. Disabled by default.

       setsebool -P daemons_use_tcp_wrapper 1



       If  you  want  to  allow  all daemons the ability to read/write terminals, you must turn on the daemons_use_tty boolean. Disabled by
       default.

       setsebool -P daemons_use_tty 1



       If you want to deny user domains applications to map a memory region as both executable and writable, this is dangerous and the exe‐
       cutable should be reported in bugzilla, you must turn on the deny_execmem boolean. Disabled by default.

       setsebool -P deny_execmem 1



       If  you  want to deny any process from ptracing or debugging any other processes, you must turn on the deny_ptrace boolean. Disabled
       by default.

       setsebool -P deny_ptrace 1



       If you want to allow any process to mmap any file on system with attribute file_type, you must  turn  on  the  domain_can_mmap_files
       boolean. Enabled by default.

       setsebool -P domain_can_mmap_files 1



       If  you  want  to  allow all domains write to kmsg_device, while kernel is executed with systemd.log_target=kmsg parameter, you must
       turn on the domain_can_write_kmsg boolean. Disabled by default.

       setsebool -P domain_can_write_kmsg 1



       If you want to allow all domains to use other domains file descriptors, you must turn  on  the  domain_fd_use  boolean.  Enabled  by
       default.

       setsebool -P domain_fd_use 1



       If  you want to allow all domains to have the kernel load modules, you must turn on the domain_kernel_load_modules boolean. Disabled
       by default.

       setsebool -P domain_kernel_load_modules 1



       If you want to allow all domains to execute in fips_mode, you must turn on the fips_mode boolean. Enabled by default.

       setsebool -P fips_mode 1



       If you want to enable reading of urandom for all domains, you must turn on the global_ssp boolean. Disabled by default.

       setsebool -P global_ssp 1



       If you want to allow confined applications to run with kerberos, you must turn on the kerberos_enabled boolean. Enabled by default.

       setsebool -P kerberos_enabled 1



       If you want to control the ability to mmap a low area of the address space, as configured by  /proc/sys/vm/mmap_min_addr,  you  must
       turn on the mmap_low_allowed boolean. Disabled by default.

       setsebool -P mmap_low_allowed 1



       If you want to allow system to run with NIS, you must turn on the nis_enabled boolean. Disabled by default.

       setsebool -P nis_enabled 1



       If you want to allow confined applications to use nscd shared memory, you must turn on the nscd_use_shm boolean. Enabled by default.

       setsebool -P nscd_use_shm 1



       If you want to disable kernel module loading, you must turn on the secure_mode_insmod boolean. Disabled by default.

       setsebool -P secure_mode_insmod 1



       If  you want to boolean to determine whether the system permits loading policy, setting enforcing mode, and changing boolean values.
       Set this to true and you have to reboot to set it back, you must turn on the secure_mode_policyload boolean. Disabled by default.

       setsebool -P secure_mode_policyload 1



       If you want to allow unconfined executables to make their heap memory executable.  Doing this is a really bad idea.  Probably  indi‐
       cates  a  badly coded executable, but could indicate an attack. This executable should be reported in bugzilla, you must turn on the
       selinuxuser_execheap boolean. Disabled by default.

       setsebool -P selinuxuser_execheap 1



       If you want to allow all unconfined executables to use libraries requiring text relocation that are not labeled textrel_shlib_t, you
       must turn on the selinuxuser_execmod boolean. Enabled by default.

       setsebool -P selinuxuser_execmod 1



       If  you  want  to allow unconfined executables to make their stack executable.  This should never, ever be necessary. Probably indi‐
       cates a badly coded executable, but could indicate an attack. This executable should be reported in bugzilla, you must turn  on  the
       selinuxuser_execstack boolean. Enabled by default.

       setsebool -P selinuxuser_execstack 1



       If you want to support X userspace object manager, you must turn on the xserver_object_manager boolean. Disabled by default.

       setsebool -P xserver_object_manager 1



MANAGED FILES
       The  SELinux  process  type  container_runtime_t  can  manage files labeled with the following file types.  The paths listed are the
       default paths for these file types.  Note the processes UID still need to have DAC permissions.

       file_type

            all files on the system


FILE CONTEXTS
       SELinux requires files to have an extended attribute to define the file type.

       You can see the context of a file using the -Z option to ls

       Policy governs the access confined processes have to these files.  SELinux container_runtime policy is very flexible allowing  users
       to setup their container_runtime processes in as secure a method as possible.

       STANDARD FILE CONTEXT

       SELinux  defines the file context types for the container_runtime, if you wanted to store files with these types in a diffent paths,
       you need to execute the semanage command to sepecify alternate labeling and then use restorecon to put the labels on disk.

       semanage fcontext -a -t container_runtime_tmpfs_t '/srv/mycontainer_runtime_content(/.*)?'
       restorecon -R -v /srv/mycontainer_runtime_content

       Note: SELinux often uses regular expressions to specify labels that match multiple files.

       The following file types are defined for container_runtime:



       container_runtime_exec_t

       - Set files with the container_runtime_exec_t type, if you want to transition an executable to the container_runtime_t domain.



       container_runtime_tmp_t

       - Set files with the container_runtime_tmp_t type, if you want to store container runtime temporary files in the /tmp directories.



       container_runtime_tmpfs_t

       - Set files with the container_runtime_tmpfs_t type, if you want to store container runtime files on a tmpfs file system.



       Note: File context can be temporarily modified with the chcon command.  If you want to permanently change the file context you  need
       to use the semanage fcontext command.  This will modify the SELinux labeling database.  You will need to use restorecon to apply the
       labels.


COMMANDS
       semanage fcontext can also be used to manipulate default file context mappings.

       semanage permissive can also be used to manipulate whether or not a process type is permissive.

       semanage module can also be used to enable/disable/install/remove policy modules.

       semanage boolean can also be used to manipulate the booleans


       system-config-selinux is a GUI tool available to customize SELinux policy settings.


AUTHOR
       This manual page was auto-generated using sepolicy manpage .


SEE ALSO
       selinux(8), container_runtime(8), semanage(8), restorecon(8), chcon(1), sepolicy(8) , setsebool(8)



container_runtime                                                 20-09-13                                     container_runtime_selinux(8)
